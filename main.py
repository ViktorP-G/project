import sys
import argparse
import os

def create_parser():
    parser = argparse.ArgumentParser(
        prog='mytool',
        description='üîß –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏',
        epilog='–ò—Å–ø–æ–ª—å–∑—É–π: mytool <–∫–æ–º–∞–Ω–¥–∞> --help',
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')

    p_copy = subparsers.add_parser('copy', help='–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª')
    p_copy.add_argument('file', help='–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª')
    p_copy.add_argument('folder', help='–ü–∞–ø–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è')
    p_copy.add_argument('--overwrite', action='store_true', help='–†–∞–∑—Ä–µ—à–∏—Ç—å –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å')

    p_del = subparsers.add_parser('delete', help='–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –∏ –ø–∞–ø–∫—É')
    p_del.add_argument('file', help='–§–∞–π–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
    p_del.add_argument('folder', help='–ü–∞–ø–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
    p_del.add_argument('--quiet', action='store_true', help='–ë–µ–∑ –≤—ã–≤–æ–¥–∞')

    p_rename = subparsers.add_parser('rename', help='–î–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É –∫ –∏–º–µ–Ω–∏')
    p_rename.add_argument('file', help='–§–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è')
    p_rename.add_argument('folder', help='–ü–∞–ø–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
    p_rename.add_argument('--recursive', action='store_true', help='–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ')

    return parser


def run_copy(args):
    original_argv = sys.argv.copy()

    sys.argv = ['copy', args.file, args.folder]
    if args.overwrite:
        sys.argv.append('--overwrite')

    try:
        core_path = os.path.join(os.path.dirname(__file__), 'core')
        if core_path not in sys.path:
            sys.path.insert(0, core_path)

        from copy import main as copy_main
        copy_main()
    finally:
        sys.argv = original_argv


def run_delete(args):
    original_argv = sys.argv.copy()

    sys.argv = ['delet', args.file, args.folder]
    if args.quiet:
        sys.argv.append('--quiet')

    try:
        core_path = os.path.join(os.path.dirname(__file__), 'core')
        if core_path not in sys.path:
            sys.path.insert(0, core_path)

        from delet import delete_files
        delete_files()
    finally:
        sys.argv = original_argv


def run_rename(args):
    original_argv = sys.argv.copy()

    sys.argv = ['date', args.file, args.folder]
    if args.recursive:
        sys.argv.append('--recursive')

    try:
        core_path = os.path.join(os.path.dirname(__file__), 'core')
        if core_path not in sys.path:
            sys.path.insert(0, core_path)

        from date_renamer import data_create_filename
        data_create_filename()
    finally:
        sys.argv = original_argv


def main():
    parser = create_parser()
    args = parser.parse_args()

    if not args.command:
        parser.print_help()
        sys.exit(1)

    try:
        if args.command == 'copy':
            run_copy(args)
        elif args.command == 'delete':
            run_delete(args)
        elif args.command == 'rename':
            run_rename(args)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}", file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main()